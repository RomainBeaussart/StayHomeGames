directive @hasRight(right: String) on OBJECT | FIELD | FIELD_DEFINITION
directive @mutationHasRight(right: String) on FIELD | FIELD_DEFINITION

scalar Json
scalar DateTime

type Query {
    loggedInUser: User
    resultUndercoverRoom(data: resultUndercoverRoomInput): resultUndercoverRoomPayload
}

type Mutation {
    login(data: LoginInput!): UserAuthPayload
    register(data: RegisterInput!): RegisterPayload

    #Undercover
    newUndercoverRoom(data: newUndercoverRoomInput!): newUndercoverRoomPayload
    joinUndercoverRoom(data: joinUndercoverRoomInput!): joinUndercoverRoomPayload
    kickUndercoverPlayer(data: kickUndercoverPlayerInput!): kickUndercoverPlayerPayload
    playUndercover(data: playUndercoverInput!): playUndercoverPayload
    setRoundUndercover(data: setRoundUndercoverInput!): setRoundUndercoverPayload
    sendVoteUndercover(data: sendVoteUndercoverInput!): sendVoteUndercoverPlayload
    endGameUndercoverRoom(data: endGameUndercoverInput!): endGameUndercoverPayload

    #Quizz
    newQuizzRoom(data: newQuizzRoomInput!): newQuizzRoomPayload
    joinQuizzRoom(data: joinQuizzRoomInput!): joinQuizzRoomPayload
    kickQuizzPlayer(data: kickQuizzPlayerInput!): kickQuizzPlayerPayload
}

# Users
input LoginInput {
    email: String!
    password: String!
}

type UserAuthPayload {
    token: String!
    user: User!
}

input RegisterInput {
    nickname: String!
    email: String!
    password: String!
}

type RegisterPayload {
    token: String!
    user: User!
}

# Undercover
input newUndercoverRoomInput {
    userId: ID!
    settings: Json!
}

type newUndercoverRoomPayload {
    roomId: ID
}

input joinUndercoverRoomInput {
    userId: ID!
    roomId: ID!
}

type joinUndercoverRoomPayload {
    roomId: ID
}

input kickUndercoverPlayerInput {
    playerId: ID!
    roomId: ID!
}

type kickUndercoverPlayerPayload {
    roomId: ID
}

input playUndercoverInput {
    roomId: ID!
}

type playUndercoverPayload {
    roomId: ID
}

input setRoundUndercoverInput {
    roomId: ID!
    playerId: ID!
    proposition: String
}

type setRoundUndercoverPayload {
    roomId: ID
}

input sendVoteUndercoverInput {
    playerId: ID!
    thinkIs: ID!
    roomId: ID!
}

type sendVoteUndercoverPlayload {
    roomId: ID
} 

input endGameUndercoverInput {
    roomId: ID
}

type endGameUndercoverPayload {
    roomId: ID
}

input resultUndercoverRoomInput {
    roomId: ID
}

type resultUndercoverRoomPayload {
    civilanWord: String
    undercoverWord: String
    undercovers: Json
    mrWhites: Json
}


#Quizz
input newQuizzRoomInput {
    userId: ID!
    settings: Json!
}

type newQuizzRoomPayload {
    roomId: ID
}

input joinQuizzRoomInput {
    userId: ID!
    roomId: ID!
}

type joinQuizzRoomPayload {
    roomId: ID
}

input kickQuizzPlayerInput {
    playerId: ID!
    roomId: ID!
}

type kickQuizzPlayerPayload {
    roomId: ID
}

